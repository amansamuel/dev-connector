{"ast":null,"code":"import axios from \"axios\";\nimport { GET_POST, GET_POSTS, ADD_POST, DELETE_POST, POST_LOADING, GET_ERRORS, CLEAR_ERRORS } from \"./types\";\nexport const addPost = postData => dispatch => {\n  dispatch(clearErrors());\n  axios.post('api/post', postData).then(res => dispatch({\n    type: ADD_POST,\n    payload: res.data\n  })).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n};\nexport const deleteComment = (postId, commentId) => dispatch => {\n  axios.delete(`/api/post/comment/${postId}/${commentId}`).then(res => dispatch({\n    type: GET_POST,\n    payload: res.data\n  })).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n};\nexport const addcomment = (id, addcomment) => dispatch => {\n  dispatch(clearErrors());\n  axios.post(`/api/post/comment/${id}`, addcomment).then(res => dispatch({\n    type: GET_POST,\n    payload: res.data\n  })).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n};\nexport const getPosts = () => dispatch => {\n  dispatch(setLoading());\n  axios.get('api/post').then(res => dispatch({\n    type: GET_POSTS,\n    payload: res.data\n  })).catch(err => dispatch({\n    type: GET_POSTS,\n    payload: null\n  }));\n};\nexport const removeLike = id => dispatch => {\n  axios.post(`/api/post/unlike/${id}`).then(res => dispatch(getPosts())).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n};\nexport const likePost = id => dispatch => {\n  axios.post(`/api/post/like/${id}`).then(res => dispatch(getPosts())).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n};\nexport const getPost = id => dispatch => {\n  dispatch(setLoading);\n  axios.get(`/api/post/${id}`).then(res => dispatch({\n    type: GET_POST,\n    payload: res.data\n  })).catch(err => dispatch({\n    type: GET_POST,\n    payload: null\n  }));\n};\nexport const deletePost = id => dispatch => {\n  axios.delete(`api/post/${id}`).then(res => dispatch({\n    type: DELETE_POST,\n    payload: id\n  })).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n};\nexport const setLoading = () => {\n  return {\n    type: POST_LOADING\n  };\n};\nexport const clearErrors = () => {\n  return {\n    type: CLEAR_ERRORS\n  };\n};","map":{"version":3,"sources":["C:/Users/aman/Desktop/Dev-connector/client/src/actions/postAction.js"],"names":["axios","GET_POST","GET_POSTS","ADD_POST","DELETE_POST","POST_LOADING","GET_ERRORS","CLEAR_ERRORS","addPost","postData","dispatch","clearErrors","post","then","res","type","payload","data","catch","err","response","deleteComment","postId","commentId","delete","addcomment","id","getPosts","setLoading","get","removeLike","likePost","getPost","deletePost"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\n\r\nimport { GET_POST,\r\n    GET_POSTS,\r\n    ADD_POST,\r\n    DELETE_POST,\r\n    POST_LOADING, \r\n    GET_ERRORS,\r\n    CLEAR_ERRORS} from \"./types\";\r\n\r\nexport const addPost = (postData) => (dispatch) => {\r\n    dispatch(clearErrors())\r\n    axios\r\n    .post('api/post', postData)\r\n      .then(res =>\r\n        dispatch({\r\n            type:ADD_POST,\r\n            payload:res.data,\r\n        }))\r\n        .catch(err =>\r\n            dispatch({\r\n                type:GET_ERRORS,\r\n                payload:err.response.data\r\n            }))\r\n}\r\n\r\nexport const deleteComment = (postId,commentId) => (dispatch) => {\r\n    axios\r\n    .delete(`/api/post/comment/${postId}/${commentId}`)\r\n      .then(res =>\r\n        dispatch({\r\n            type:GET_POST,\r\n            payload:res.data,\r\n        }))\r\n        .catch(err =>\r\n            dispatch({\r\n                type:GET_ERRORS,\r\n                payload:err.response.data\r\n            }))\r\n}\r\nexport const addcomment = (id,addcomment) => (dispatch) => {\r\n    dispatch(clearErrors())\r\n    axios\r\n    .post(`/api/post/comment/${id}`, addcomment)\r\n      .then(res =>\r\n        dispatch({\r\n            type:GET_POST,\r\n            payload:res.data,\r\n        }))\r\n        .catch(err =>\r\n            dispatch({\r\n                type:GET_ERRORS,\r\n                payload:err.response.data\r\n            }))\r\n}\r\n\r\nexport const getPosts = () => (dispatch) => {\r\n    dispatch(setLoading());\r\n    axios\r\n    .get('api/post')\r\n      .then(res =>\r\n        dispatch({\r\n            type:GET_POSTS,\r\n            payload:res.data,\r\n        }))\r\n        .catch(err =>\r\n            dispatch({\r\n                type:GET_POSTS,\r\n                payload:null\r\n            }))\r\n}\r\nexport const removeLike =(id) =>(dispatch) => {\r\n    axios\r\n      .post(`/api/post/unlike/${id}`)\r\n      .then(res =>dispatch(getPosts()))\r\n      .catch(err =>\r\n        dispatch({\r\n            type:GET_ERRORS,\r\n            payload:err.response.data\r\n        }))\r\n}\r\nexport const likePost =(id) =>(dispatch) => {\r\naxios\r\n  .post(`/api/post/like/${id}`)\r\n   .then(res => \r\n    dispatch(getPosts())\r\n    ).catch(err =>dispatch({\r\n            type:GET_ERRORS,\r\n            payload:err.response.data\r\n        }))\r\n}\r\n\r\nexport const getPost = (id) =>(dispatch) => {\r\n    dispatch(setLoading)\r\n    axios\r\n     .get(`/api/post/${id}`)\r\n     .then(res =>\r\n        dispatch({\r\n            type:GET_POST,\r\n            payload:res.data\r\n        }))\r\n        .catch(err =>\r\n            dispatch({\r\n                type:GET_POST,\r\n                payload:null\r\n            }))\r\n        \r\n}\r\n\r\nexport const deletePost = (id) => (dispatch) => {\r\n    axios\r\n    .delete(`api/post/${id}`)\r\n      .then(res =>\r\n        dispatch({\r\n            type:DELETE_POST,\r\n            payload:id,\r\n        }))\r\n        .catch(err =>\r\n            dispatch({\r\n                type:GET_ERRORS,\r\n                payload:err.response.data\r\n            }))\r\n}\r\nexport const setLoading = () => {\r\n\r\n    return {\r\n        type:POST_LOADING \r\n    }\r\n}\r\nexport const clearErrors = () => {\r\n\r\n    return {\r\n        type:CLEAR_ERRORS \r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}