{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aman\\\\Desktop\\\\Dev-connector\\\\client\\\\src\\\\components\\\\auth\\\\Register.js\";\nimport React, { Component } from 'react';\nimport propsTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { registerUser } from '../../actions/authAction';\nimport TextFieldGroup from '../common/TextFieldGroup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Register extends Component {\n  constructor() {\n    super();\n    this.state = {\n      name: '',\n      email: '',\n      password: '',\n      password2: '',\n      errors: ''\n    };\n    this.onChange = this.onChange.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    if (this.props.auth.isAuthenticated) {\n      this.props.history.push('dashboard');\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.errors) {\n      this.setState({\n        errors: nextProps.errors.errors\n      });\n    }\n  }\n\n  onChange(event) {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  onSubmit(e) {\n    e.preventDefault();\n    const newUser = {\n      name: this.state.name,\n      email: this.state.email,\n      password: this.state.password,\n      password2: this.state.password2\n    };\n    this.props.registerUser(newUser, this.props.history); // axios.post('/api/users/register', newUser)\n    //       .then(res =>console.log(res.data))\n    //         .catch(err =>this.setState({errors:err.response.data}))\n  }\n\n  render() {\n    const {\n      errors\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"register\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-md-8 m-auto\",\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              className: \"display-4 text-center\",\n              children: \"Sign Up\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"lead text-center\",\n              children: \"Create your DevConnector account\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n              onSubmit: this.onSubmit,\n              children: [/*#__PURE__*/_jsxDEV(TextFieldGroup, {\n                type: \"text\",\n                error: errors.name,\n                name: \"name\",\n                placeholder: \"Name\",\n                value: this.state.name,\n                onChange: this.onChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 62,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(TextFieldGroup, {\n                type: \"email\",\n                value: this.state.email,\n                onChange: this.state.onChange,\n                error: errors.email,\n                name: \"email\",\n                placeholder: \"Email Address\",\n                value: this.state.email,\n                onChange: this.onChange,\n                info: \"This site uses Gravatar so if you want a profile image, use a Gravatar email\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 70,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(TextFieldGroup, {\n                type: \"password\",\n                error: errors.password,\n                placeholder: \"Password\",\n                name: \"password\",\n                value: this.state.password,\n                onChange: this.onChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 81,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(TextFieldGroup, {\n                type: \"password\",\n                error: errors.password2,\n                placeholder: \"Confirm Password\",\n                name: \"password2\",\n                value: this.state.password2,\n                onChange: this.onChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"submit\",\n                className: \"btn btn-info btn-block mt-4\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 99,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nRegister.propsTypes = {\n  registerUser: propsTypes.func.isRequired,\n  auth: propsTypes.object.isRequired,\n  errors: propsTypes.object.isRequired\n};\n\nconst mapstateToprops = state => ({\n  auth: state.auth,\n  errors: state.errors\n});\n\nexport default connect(mapstateToprops, {\n  registerUser\n})(withRouter(Register));","map":{"version":3,"sources":["C:/Users/aman/Desktop/Dev-connector/client/src/components/auth/Register.js"],"names":["React","Component","propsTypes","connect","withRouter","registerUser","TextFieldGroup","Register","constructor","state","name","email","password","password2","errors","onChange","bind","onSubmit","componentDidMount","props","auth","isAuthenticated","history","push","componentWillReceiveProps","nextProps","setState","event","target","value","e","preventDefault","newUser","render","func","isRequired","object","mapstateToprops"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport propsTypes from 'prop-types';\r\nimport {connect } from 'react-redux';\r\nimport {withRouter} from 'react-router-dom'\r\nimport {registerUser} from '../../actions/authAction';\r\nimport TextFieldGroup from '../common/TextFieldGroup';\r\n class Register extends Component {\r\n\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            name:'',\r\n            email:'',\r\n            password:'',\r\n            password2:'',\r\n            errors:'',\r\n        }\r\n        this.onChange =this.onChange.bind(this);\r\n        this.onSubmit =this.onSubmit.bind(this);\r\n    }\r\n    componentDidMount() {\r\n      if(this.props.auth.isAuthenticated) {\r\n        this.props.history.push('dashboard');\r\n      }\r\n    }\r\n    componentWillReceiveProps(nextProps) {\r\n      if(nextProps.errors) {\r\n        this.setState({errors:nextProps.errors.errors})\r\n      }\r\n    }\r\n    onChange(event) {\r\n        this.setState({[event.target.name] : event.target.value})\r\n    }\r\n    onSubmit(e) {\r\n        e.preventDefault();\r\n        const newUser ={\r\n            name:this.state.name,\r\n            email:this.state.email,\r\n            password:this.state.password,\r\n            password2:this.state.password2\r\n        }\r\n        this.props.registerUser(newUser, this.props.history)\r\n        // axios.post('/api/users/register', newUser)\r\n        //       .then(res =>console.log(res.data))\r\n        //         .catch(err =>this.setState({errors:err.response.data}))\r\n    }\r\n    render() {\r\n      const {errors} =this.state;\r\n      \r\n        return (\r\n         \r\n            <div className=\"register\">\r\n            <div className=\"container\">\r\n              <div className=\"row\">\r\n                \r\n                <div className=\"col-md-8 m-auto\">\r\n                  <h1 className=\"display-4 text-center\">Sign Up</h1>\r\n                  <p className=\"lead text-center\">Create your DevConnector account</p>\r\n                  <form onSubmit={this.onSubmit}>\r\n                   \r\n                    <TextFieldGroup type=\"text\"\r\n                    error={errors.name}\r\n                    name=\"name\"\r\n                    placeholder=\"Name\"\r\n                    value={this.state.name}\r\n                    onChange={this.onChange}\r\n\r\n                    />\r\n                    <TextFieldGroup \r\n                    type=\"email\"\r\n                    value={this.state.email}\r\n                    onChange={this.state.onChange}\r\n                    error={errors.email}\r\n                    name=\"email\"\r\n                    placeholder=\"Email Address\"\r\n                    value={this.state.email}\r\n                    onChange={this.onChange}\r\n                    info=\"This site uses Gravatar so if you want a profile image, use a Gravatar email\"\r\n                    />\r\n                    <TextFieldGroup \r\n                    type=\"password\"\r\n                    error={errors.password}\r\n                    placeholder=\"Password\"\r\n                    name=\"password\"\r\n                    value={this.state.password}\r\n                    onChange={this.onChange}\r\n                    />\r\n                    \r\n                    <TextFieldGroup \r\n                    type=\"password\"\r\n                    error={errors.password2}\r\n                    placeholder=\"Confirm Password\"\r\n                    name=\"password2\"\r\n                    value={this.state.password2}\r\n                    onChange={this.onChange}\r\n                    />\r\n                   \r\n                    <input type=\"submit\" className=\"btn btn-info btn-block mt-4\" />\r\n                  </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        \r\n        )\r\n    }\r\n}\r\n\r\nRegister.propsTypes = {\r\n  registerUser:propsTypes.func.isRequired,\r\n  auth:propsTypes.object.isRequired,\r\n  errors:propsTypes.object.isRequired\r\n}\r\n\r\nconst mapstateToprops =(state) =>({\r\n  auth:state.auth,\r\n  errors:state.errors\r\n})\r\n\r\nexport default connect(mapstateToprops, {registerUser})(withRouter(Register));"]},"metadata":{},"sourceType":"module"}